C51 COMPILER V9.57.0.0   MPU6050                                                           01/07/2021 18:03:34 PAGE 1   


C51 COMPILER V9.57.0.0, COMPILATION OF MODULE MPU6050
OBJECT MODULE PLACED IN .\Objects\MPU6050.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE MPU6050.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\DMP) DEBUG OBJECTEXTEN
                    -D PRINT(.\Listings\MPU6050.lst) TABS(2) OBJECT(.\Objects\MPU6050.obj)

line level    source

   1          #include "MPU6050.H" 
   2          
   3          
   4          //*****************************************************************************************************
   5          //向I2C设备写入一个字节数据
   6          //*****************************************************************************************************
   7          void MPU_Write_Byte(u8 REG_Address,u8 REG_data)
   8          {
   9   1          I2C_Start();                  //起始信号
  10   1          I2C_SendByte(SlaveAddress);   //发送设备地址+写信号
  11   1          I2C_SendByte(REG_Address);    //内部寄存器地址，
  12   1          I2C_SendByte(REG_data);       //内部寄存器数据，
  13   1          I2C_Stop();                   //发送停止信号
  14   1      }
  15          //*******************************************************************************************************
  16          //从I2C设备读取一个字节数据
  17          //*******************************************************************************************************
  18          u8 MPU_Read_Byte(u8 REG_Address)
  19          {
  20   1        u8 REG_data;
  21   1        I2C_Start();                   //起始信号
  22   1        I2C_SendByte(SlaveAddress);    //发送设备地址+写信号
  23   1        I2C_SendByte(REG_Address);     //发送存储单元地址，从0开始  
  24   1        I2C_Start();                   //起始信号
  25   1        I2C_SendByte(SlaveAddress+1);  //发送设备地址+读信号
  26   1        REG_data=I2C_RecvByte(1);       //读出寄存器数据
  27   1        I2C_SendACK(1);                //接收应答信号
  28   1        I2C_Stop();                    //停止信号
  29   1        return REG_data;
  30   1      }
  31          ////******************************************************************************************************
             -***
  32          ////IIC连续写
  33          ////addr:器件地址 
  34          ////reg:寄存器地址
  35          ////len:写入长度
  36          ////buf:数据区
  37          ////返回值:0,正常
  38          ////    其他,错误代码
  39          //u8 MPU_Write_Len(u8 addr,u8 reg,u8 len,u8 *buf)
  40          //{
  41          //  u8 i; 
  42          //  I2C_Start(); 
  43          //  I2C_SendByte(SlaveAddress);//发送器件地址+写命令  
  44          //  if(I2C_RecvACK()) //等待应答
  45          //  {
  46          //    I2C_Stop();    
  47          //    return 1;   
  48          //  }
  49          //    I2C_SendByte(reg);  //写寄存器地址
  50          //    I2C_RecvACK();    //等待应答
  51          //  for(i=0;i<len;i++)
  52          //  {
  53          //    I2C_SendByte(buf[i]); //发送数据
C51 COMPILER V9.57.0.0   MPU6050                                                           01/07/2021 18:03:34 PAGE 2   

  54          //    if(I2C_RecvACK())   //等待ACK
  55          //    {
  56          //      I2C_Stop();  
  57          //      return 1;    
  58          //    }   
  59          //  }    
  60          //  I2C_Stop();  
  61          //  return 0; 
  62          //} 
  63          ////******************************************************************************************************
             -**
  64          ////IIC连续读
  65          ////addr:器件地址
  66          ////reg:要读取的寄存器地址
  67          ////len:要读取的长度
  68          ////buf:读取到的数据存储区
  69          ////返回值:0,正常
  70          ////    其他,错误代码
  71          //u8 MPU_Read_Len(u8 addr,u8 reg,u8 len,u8 *buf)
  72          //{ 
  73          //  I2C_Start(); 
  74          //  I2C_SendByte(SlaveAddress);//发送器件地址+写命令  
  75          //  if(I2C_RecvACK()) //等待应答
  76          //  {
  77          //    I2C_Stop();    
  78          //    return 1;   
  79          //  }
  80          //  I2C_SendByte(reg);  //写寄存器地址
  81          //  I2C_RecvACK();    //等待应答
  82          //  I2C_Start();
  83          //  I2C_SendByte(SlaveAddress+1);//发送器件地址+读命令  
  84          //  I2C_RecvACK();    //等待应答 
  85          //  while(len)
  86          //  {
  87          //    if(len==1)
  88          //      *buf=I2C_RecvByte(1);//读数据,发送nACK 
  89          //    else 
  90          //      *buf=I2C_RecvByte(0); //读数据,发送ACK  
  91          //    len--;
  92          //    buf++; 
  93          //  }    
  94          //    I2C_Stop(); //产生一个停止条件 
  95          //  return 0; 
  96          //}
  97          //******************************************************************************************************
  98          //初始化MPU6050
  99          //******************************************************************************************************
 100          void InitMPU6050(void)
 101          {
 102   1        MPU_Write_Byte(PWR_MGMT_1, 0x00); //解除休眠状态
 103   1        MPU_Write_Byte(SMPLRT_DIV, 0x07);  //陀螺仪采样率分频 1K/(0x07+1) =125hz
 104   1        MPU_Write_Byte(CONFIG, 0x03);      //低通滤波频率一般为采样器频率一半，这里取近似值（陀螺仪）42hz（加速度
             -计）44hz
 105   1        MPU_Write_Byte(GYRO_CONFIG, 0x18);  //陀螺仪测量范围(不自检，2000deg/s)
 106   1        MPU_Write_Byte(ACCEL_CONFIG, 0x01);  //加速度计测量范围(不自检，2G，5Hz)
 107   1      }
 108          //******************************************************************************************************
 109          //合成数据
 110          //******************************************************************************************************
 111          int GetData(u8 REG_Address)
 112          {
 113   1        u8 H,L;
C51 COMPILER V9.57.0.0   MPU6050                                                           01/07/2021 18:03:34 PAGE 3   

 114   1        H=MPU_Read_Byte(REG_Address);
 115   1        L=MPU_Read_Byte(REG_Address+1);
 116   1        return ((H<<8)+L);   //合成数据
 117   1      }
 118          
 119          /*********************************END FILE*************************************/
 120          
 121          
 122          
 123          
 124          
 125          
 126          
 127          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    161    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       6
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

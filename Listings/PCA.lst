C51 COMPILER V9.57.0.0   PCA                                                               05/26/2020 20:33:25 PAGE 1   


C51 COMPILER V9.57.0.0, COMPILATION OF MODULE PCA
OBJECT MODULE PLACED IN .\Objects\PCA.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE PCA.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\PCA.l
                    -st) TABS(2) OBJECT(.\Objects\PCA.obj)

line level    source

   1          
   2          #include  "PCA.h"
*** WARNING C318 IN LINE 5 OF PCA.h: can't open file 'config.h'
*** ERROR C141 IN LINE 50 OF PCA.h: syntax error near 'u8'
*** ERROR C129 IN LINE 50 OF PCA.h: missing ';' before 'PCA_IoUse'
   3          
   4          bit   B_Capture0,B_Capture1,B_Capture2;
   5          u8    PCA0_mode,PCA1_mode,PCA2_mode;
   6          u16   CCAP0_tmp,PCA_Timer0;
   7          u16   CCAP1_tmp,PCA_Timer1;
   8          u16   CCAP2_tmp,PCA_Timer2;
   9          
  10          /*************  功能说明  **************
  11          
  12          
  13          ******************************************/
  14          
  15          u16 PWM0_low; //PWM输出低电平的PCA时钟脉冲个数, 用户层不可见。
  16          u16 PWM1_low; //PWM输出低电平的PCA时钟脉冲个数, 用户层不可见。
  17          u16 PWM2_low; //PWM输出低电平的PCA时钟脉冲个数, 用户层不可见。
  18          
  19          
  20          //========================================================================
  21          // 函数: void PWMn_SetHighReg(unsigned int high)
  22          // 描述: 更新占空比数据。
  23          // 参数: high:  占空比数据，即PWM输出高电平的PCA时钟脉冲个数。
  24          // 返回: 无
  25          // 版本: VER1.0
  26          // 日期: 2013-5-15
  27          // 备注: 
  28          //========================================================================
  29          void PWMn_Update(u8 PCA_id, u16 high)
  30          {
  31            if(PCA_id == PCA0)
  32            {
  33              if(high > PWM0_HIGH_MAX)  high = PWM0_HIGH_MAX; //如果写入大于最大占空比数据，强制为最大占空比。
  34              if(high < PWM0_HIGH_MIN)  high = PWM0_HIGH_MIN; //如果写入小于最小占空比数据，则返回错误代码2。
  35              CR = 0;             //停止PCA。
  36              PCA_Timer0 = high;        //数据在正确范围，则装入占空比寄存器。
  37              PWM0_low = PWM0_DUTY - high;  //计算并保存PWM输出低电平的PCA时钟脉冲个数。
  38              CR = 1;             //启动PCA。
  39            }
  40            else if(PCA_id == PCA1)
  41            {
  42              if(high > PWM1_HIGH_MAX)  high = PWM1_HIGH_MAX; //如果写入大于最大占空比数据，强制为最大占空比。
  43              if(high < PWM1_HIGH_MIN)  high = PWM1_HIGH_MIN; //如果写入小于最小占空比数据，则返回错误代码2。
  44              CR = 0;             //停止PCA。
  45              PCA_Timer1 = high;        //数据在正确范围，则装入占空比寄存器。
  46              PWM1_low = PWM1_DUTY - high;  //计算并保存PWM输出低电平的PCA时钟脉冲个数。
  47              CR = 1;             //启动PCA。
  48            }
  49            else if(PCA_id == PCA2)
  50            {
  51              if(high > PWM2_HIGH_MAX)    high = PWM2_HIGH_MAX; //如果写入大于最大占空比数据，强制为最大占空比。
C51 COMPILER V9.57.0.0   PCA                                                               05/26/2020 20:33:25 PAGE 2   

  52              if(high < PWM2_HIGH_MIN)    high = PWM2_HIGH_MIN; //如果写入小于最小占空比数据，则返回错误代码2。
  53              CR = 0;           //停止PCA。
  54              PCA_Timer2 = high;            //数据在正确范围，则装入占空比寄存器。
  55              PWM2_low = PWM2_DUTY - high;        //计算并保存PWM输出低电平的PCA时钟脉冲个数。
  56              CR = 1;           //启动PCA。
  57            }
  58          }
  59          
  60          
  61          
  62          //========================================================================
  63          // 函数: UpdatePwm(u8 PCA_id, u8 pwm_value)
  64          // 描述: 更新PWM值. 
  65          // 参数: PCA_id: PCA序号. 取值 PCA0,PCA1,PCA2,PCA_Counter
  66          //     pwm_value: pwm值, 这个值是输出低电平的时间.
  67          // 返回: none.
  68          // 版本: V1.0, 2012-11-22
  69          //========================================================================
  70          /*
  71          void  UpdatePwm(u8 PCA_id, u8 pwm_value)
  72          {
  73            if(PCA_id == PCA0)    CCAP0H = pwm_value;
  74            else if(PCA_id == PCA1) CCAP1H = pwm_value;
  75            else if(PCA_id == PCA2) CCAP2H = pwm_value;
  76          }
  77          */
  78          
  79          //========================================================================
  80          // 函数: void PCA_Init(PCA_id, PCA_InitTypeDef *PCAx)
  81          // 描述: PCA初始化程序.
  82          // 参数: PCA_id: PCA序号. 取值 PCA0,PCA1,PCA2,PCA_Counter
  83          //     PCAx: 结构参数,请参考PCA.h里的定义.
  84          // 返回: none.
  85          // 版本: V1.0, 2012-11-22
  86          //========================================================================
  87          void  PCA_Init(u8 PCA_id, PCA_InitTypeDef *PCAx)
  88          {
  89            if(PCA_id > PCA_Counter)  return;   //id错误
  90          
  91            if(PCA_id == PCA_Counter)     //设置公用Counter
  92            {
  93              CR = 0;
  94              CH = 0;
  95              CL = 0;
  96              AUXR1 = (AUXR1 & ~(3<<4)) | PCAx->PCA_IoUse;      //切换IO口
  97              CMOD  = (CMOD  & ~(7<<1)) | PCAx->PCA_Clock;      //选择时钟源
  98              CMOD  = (CMOD  & ~1) | (PCAx->PCA_Interrupt_Mode & 1);  //ECF
  99              if(PCAx->PCA_Polity == PolityHigh)    PPCA = 1; //高优先级中断
 100              else                  PPCA = 0; //低优先级中断
 101              CR = 1;
 102              return;
 103            }
 104          
 105            PCAx->PCA_Interrupt_Mode &= (3<<4) + 1;
 106            if(PCAx->PCA_Mode >= PCA_Mode_SoftTimer)  PCAx->PCA_Interrupt_Mode &= ~(3<<4);
 107          
 108            if(PCA_id == PCA0)
 109            {
 110              CCAPM0    = PCAx->PCA_Mode | PCAx->PCA_Interrupt_Mode;  //工作模式, 中断模式
 111              PCA_PWM0  = (PCA_PWM0 & ~(3<<6)) | PCAx->PCA_PWM_Wide;  //PWM宽度
 112          
 113              PCA_Timer0 = PCAx->PCA_Value;
C51 COMPILER V9.57.0.0   PCA                                                               05/26/2020 20:33:25 PAGE 3   

 114              B_Capture0 = 0;
 115              PCA0_mode = PCAx->PCA_Mode;
 116              CCAP0_tmp = PCA_Timer0;
 117              CCAP0L = (u8)CCAP0_tmp;     //将影射寄存器写入捕获寄存器，先写CCAP0L
 118              CCAP0H = (u8)(CCAP0_tmp >> 8);  //后写CCAP0H
 119            }
 120            if(PCA_id == PCA1)
 121            {
 122              CCAPM1    = PCAx->PCA_Mode | PCAx->PCA_Interrupt_Mode;
 123              PCA_PWM1  = (PCA_PWM1 & ~(3<<6)) | PCAx->PCA_PWM_Wide;
 124          
 125              PCA_Timer1 = PCAx->PCA_Value;
 126              B_Capture1 = 0;
 127              PCA1_mode = PCAx->PCA_Mode;
 128              CCAP1_tmp = PCA_Timer1;
 129              CCAP1L = (u8)CCAP1_tmp;     //将影射寄存器写入捕获寄存器，先写CCAP0L
 130              CCAP1H = (u8)(CCAP1_tmp >> 8);  //后写CCAP0H
 131            }
 132            if(PCA_id == PCA2)
 133            {
 134              CCAPM2    = PCAx->PCA_Mode | PCAx->PCA_Interrupt_Mode;
 135              PCA_PWM2  = (PCA_PWM2 & ~(3<<6)) | PCAx->PCA_PWM_Wide;
 136          
 137              PCA_Timer2 = PCAx->PCA_Value;
 138              B_Capture2 = 0;
 139              PCA2_mode = PCAx->PCA_Mode;
 140              CCAP2_tmp = PCA_Timer2;
 141              CCAP2L = (u8)CCAP2_tmp;     //将影射寄存器写入捕获寄存器，先写CCAP0L
 142              CCAP2H = (u8)(CCAP2_tmp >> 8);  //后写CCAP0H
 143            }
 144          }
 145          
 146          
 147          //========================================================================
 148          // 函数: void PCA_Handler (void) interrupt PCA_VECTOR
 149          // 描述: PCA中断处理程序.
 150          // 参数: None
 151          // 返回: none.
 152          // 版本: V1.0, 2012-11-22
 153          //========================================================================
 154          void  PCA_Handler (void) interrupt PCA_VECTOR
 155          {
 156            if(CCF0)    //PCA模块0中断
 157            {
 158              CCF0 = 0;   //清PCA模块0中断标志
 159              if(P25) CCAP0_tmp += PCA_Timer0;  //输出为高电平，则给影射寄存器装载高电平时间长度
 160              else  CCAP0_tmp += PWM0_low;  //输出为低电平，则给影射寄存器装载低电平时间长度
 161              CCAP0L = (u8)CCAP0_tmp;     //将影射寄存器写入捕获寄存器，先写CCAP0L
 162              CCAP0H = (u8)(CCAP0_tmp >> 8);  //后写CCAP0H
 163            }
 164          
 165            if(CCF1)  //PCA模块1中断
 166            {
 167              CCF1 = 0;   //清PCA模块1中断标志
 168              if(P26) CCAP1_tmp += PCA_Timer1;  //输出为高电平，则给影射寄存器装载高电平时间长度
 169              else  CCAP1_tmp += PWM1_low;  //输出为低电平，则给影射寄存器装载低电平时间长度
 170              CCAP1L = (u8)CCAP1_tmp;     //将影射寄存器写入捕获寄存器，先写CCAP0L
 171              CCAP1H = (u8)(CCAP1_tmp >> 8);  //后写CCAP0H
 172            }
 173          
 174            if(CCF2)  //PCA模块2中断
 175            {
C51 COMPILER V9.57.0.0   PCA                                                               05/26/2020 20:33:25 PAGE 4   

 176              CCF2 = 0;   //清PCA模块1中断标志
 177              if(P27) CCAP2_tmp += PCA_Timer2;  //输出为高电平，则给影射寄存器装载高电平时间长度
 178              else  CCAP2_tmp += PWM2_low;  //输出为低电平，则给影射寄存器装载低电平时间长度
 179              CCAP2L = (u8)CCAP2_tmp;     //将影射寄存器写入捕获寄存器，先写CCAP0L
 180              CCAP2H = (u8)(CCAP2_tmp >> 8);  //后写CCAP0H
 181            }
 182          
 183          /*  if(CF)  //PCA溢出中断
 184            {
 185              CF = 0;     //清PCA溢出中断标志
 186            }
 187          */
 188          }

C51 COMPILATION COMPLETE.  1 WARNING(S),  2 ERROR(S)
